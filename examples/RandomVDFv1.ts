/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface RandomVDFv1Interface extends utils.Interface {
  functions: {
    "createSeed()": FunctionFragment;
    "iterations()": FunctionFragment;
    "prime()": FunctionFragment;
    "proof()": FunctionFragment;
    "prove(uint256)": FunctionFragment;
    "seeds(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSeed"
      | "iterations"
      | "prime"
      | "proof"
      | "prove"
      | "seeds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iterations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "prime", values?: undefined): string;
  encodeFunctionData(functionFragment: "proof", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prove",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "seeds",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createSeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iterations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seeds", data: BytesLike): Result;

  events: {};
}

export interface RandomVDFv1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandomVDFv1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSeed(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    iterations(overrides?: CallOverrides): Promise<[BigNumber]>;

    prime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proof(overrides?: CallOverrides): Promise<[BigNumber]>;

    prove(
      _proof: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    seeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  createSeed(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  iterations(overrides?: CallOverrides): Promise<BigNumber>;

  prime(overrides?: CallOverrides): Promise<BigNumber>;

  proof(overrides?: CallOverrides): Promise<BigNumber>;

  prove(
    _proof: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  seeds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    createSeed(overrides?: CallOverrides): Promise<void>;

    iterations(overrides?: CallOverrides): Promise<BigNumber>;

    prime(overrides?: CallOverrides): Promise<BigNumber>;

    proof(overrides?: CallOverrides): Promise<BigNumber>;

    prove(
      _proof: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    seeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    createSeed(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    iterations(overrides?: CallOverrides): Promise<BigNumber>;

    prime(overrides?: CallOverrides): Promise<BigNumber>;

    proof(overrides?: CallOverrides): Promise<BigNumber>;

    prove(
      _proof: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    seeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSeed(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    iterations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proof(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prove(
      _proof: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    seeds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
